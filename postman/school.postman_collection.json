{
	"info": {
		"_postman_id": "8443c861-ef11-4036-88d0-b5b764a90237",
		"name": "school",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "22464779"
	},
	"item": [
		{
			"name": "Create new group",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.parallelNumber, '\"parallelNumber\" field').to.eql(3);\r",
							"    pm.expect(jsonData.letter, '\"letter\" field').to.eql('A');\r",
							"    pm.expect(jsonData.studentsAge, '\"studentsAge\" field').to.eql(9);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"parallelNumber\": 3,\r\n    \"letter\": \"A\",\r\n    \"studentsAge\": 9\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/groups",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create second group",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(2);\r",
							"    pm.expect(jsonData.parallelNumber, '\"parallelNumber\" field').to.eql(1);\r",
							"    pm.expect(jsonData.letter, '\"letter\" field').to.eql('A');\r",
							"    pm.expect(jsonData.studentsAge, '\"studentsAge\" field').to.eql(7);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"parallelNumber\": 1,\r\n    \"letter\": \"A\",\r\n    \"studentsAge\": 7\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/groups",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update group",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.parallelNumber, '\"parallelNumber\" field').to.eql(2);\r",
							"    pm.expect(jsonData.letter, '\"letter\" field').to.eql('B');\r",
							"    pm.expect(jsonData.studentsAge, '\"studentsAge\" field').to.eql(8);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"parallelNumber\": 2,\r\n    \"letter\": \"B\",\r\n    \"studentsAge\": 8\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/groups",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get groups",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test get all user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'groups count in total').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/groups",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get group by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test get user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.parallelNumber, '\"parallelNumber\" field').to.eql(2);\r",
							"    pm.expect(jsonData.letter, '\"letter\" field').to.eql('B');\r",
							"    pm.expect(jsonData.studentsAge, '\"studentsAge\" field').to.eql(8);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/groups/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"groups",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete first group",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/groups/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"groups",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create third group",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(3);\r",
							"    pm.expect(jsonData.parallelNumber, '\"parallelNumber\" field').to.eql(2);\r",
							"    pm.expect(jsonData.letter, '\"letter\" field').to.eql('A');\r",
							"    pm.expect(jsonData.studentsAge, '\"studentsAge\" field').to.eql(8);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"parallelNumber\": 2,\r\n    \"letter\": \"A\",\r\n    \"studentsAge\": 8\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/groups",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"groups"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new teacher",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.firstName, '\"firstName\" field').to.eql('Name');\r",
							"    pm.expect(jsonData.lastName, '\"lastName\" field').to.eql('Lastname');\r",
							"    pm.expect(jsonData.age, '\"age\" field').to.eql(30);\r",
							"    pm.expect(jsonData.specialization, '\"specialization\" field').to.eql('Specialization');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"Name\",\r\n    \"lastName\": \"Lastname\",\r\n    \"age\": 30,\r\n    \"specialization\": \"Specialization\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/teachers",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"teachers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add second teacher",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(2);\r",
							"    pm.expect(jsonData.firstName, '\"firstName\" field').to.eql('Name2');\r",
							"    pm.expect(jsonData.lastName, '\"lastName\" field').to.eql('Lastname2');\r",
							"    pm.expect(jsonData.age, '\"age\" field').to.eql(35);\r",
							"    pm.expect(jsonData.specialization, '\"specialization\" field').to.eql('Specialization');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"Name2\",\r\n    \"lastName\": \"Lastname2\",\r\n    \"age\": 35,\r\n    \"specialization\": \"Specialization\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/teachers",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"teachers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get teachers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test get all user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'teachers count in total').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/teachers",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"teachers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get teacher by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(2);\r",
							"    pm.expect(jsonData.firstName, '\"firstName\" field').to.eql('Name2');\r",
							"    pm.expect(jsonData.lastName, '\"lastName\" field').to.eql('Lastname2');\r",
							"    pm.expect(jsonData.age, '\"age\" field').to.eql(35);\r",
							"    pm.expect(jsonData.specialization, '\"specialization\" field').to.eql('Specialization');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/teachers/2",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"teachers",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update teacher",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.firstName, '\"firstName\" field').to.eql('Name');\r",
							"    pm.expect(jsonData.lastName, '\"lastName\" field').to.eql('NewLastName');\r",
							"    pm.expect(jsonData.age, '\"age\" field').to.eql(30);\r",
							"    pm.expect(jsonData.specialization, '\"specialization\" field').to.eql('New Specialization');\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"lastName\": \"NewLastName\",\r\n    \"specialization\": \"New Specialization\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/teachers",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"teachers"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add group to teacher",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.firstName, '\"firstName\" field').to.eql('Name');\r",
							"    pm.expect(jsonData.lastName, '\"lastName\" field').to.eql('NewLastName');\r",
							"    pm.expect(jsonData.age, '\"age\" field').to.eql(30);\r",
							"    pm.expect(jsonData.specialization, '\"specialization\" field').to.eql('New Specialization');\r",
							"    pm.expect(jsonData.groups[0].id, 'groups[0] id').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"groupId\": 2\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/teachers/1/group",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"teachers",
						"1",
						"group"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add homeroom teacher to group",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(3);\r",
							"    pm.expect(jsonData.parallelNumber, '\"parallelNumber\" field').to.eql(2);\r",
							"    pm.expect(jsonData.letter, '\"letter\" field').to.eql('A');\r",
							"    pm.expect(jsonData.studentsAge, '\"studentsAge\" field').to.eql(8);\r",
							"    pm.expect(jsonData.homeroomTeacher.id, 'homeroomTeacher id').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"teacherId\": 2\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/groups/3/homeroomTeacher",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"groups",
						"3",
						"homeroomTeacher"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete group from teacher",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/teachers/1/group/2",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"teachers",
						"1",
						"group",
						"2"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete teacher",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/teachers/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"teachers",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add new student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.firstName, '\"firstName\" field').to.eql('Student1');\r",
							"    pm.expect(jsonData.lastName, '\"lastName\" field').to.eql('Lastname');\r",
							"    pm.expect(jsonData.age, '\"age\" field').to.eql(7);\r",
							"    pm.expect(jsonData.group.id, 'group id').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"Student1\",\r\n    \"lastName\": \"Lastname\",\r\n    \"age\": 7\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/students",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add second student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(2);\r",
							"    pm.expect(jsonData.firstName, '\"firstName\" field').to.eql('Student2');\r",
							"    pm.expect(jsonData.lastName, '\"lastName\" field').to.eql('Lastname');\r",
							"    pm.expect(jsonData.age, '\"age\" field').to.eql(8);\r",
							"    pm.expect(jsonData.averageGrade, '\"averageGrade\" field').to.eql(4.0);\r",
							"    pm.expect(jsonData.group.id, 'group id').to.eql(3);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"firstName\": \"Student2\",\r\n    \"lastName\": \"Lastname\",\r\n    \"age\": 8,\r\n    \"averageGrade\": 4.0\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/students",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.firstName, '\"firstName\" field').to.eql('Student1');\r",
							"    pm.expect(jsonData.lastName, '\"lastName\" field').to.eql('NewLastname');\r",
							"    pm.expect(jsonData.age, '\"age\" field').to.eql(7);\r",
							"    pm.expect(jsonData.group.id, 'group id').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"id\": 1,\r\n    \"lastName\": \"NewLastname\"\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/students",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get students",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});\r",
							"pm.test(\"Test get all user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.length, 'students count in total').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/students",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"students"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get student by id",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.firstName, '\"firstName\" field').to.eql('Student1');\r",
							"    pm.expect(jsonData.lastName, '\"lastName\" field').to.eql('NewLastname');\r",
							"    pm.expect(jsonData.age, '\"age\" field').to.eql(7);\r",
							"    pm.expect(jsonData.group.id, 'group id').to.eql(2);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "localhost:8080/students/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"students",
						"1"
					]
				}
			},
			"response": []
		},
		{
			"name": "Change group for student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200,201]);\r",
							"});\r",
							"pm.test(\"Test create user\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.id, '\"id\" field').to.eql(1);\r",
							"    pm.expect(jsonData.firstName, '\"firstName\" field').to.eql('Student1');\r",
							"    pm.expect(jsonData.lastName, '\"lastName\" field').to.eql('NewLastname');\r",
							"    pm.expect(jsonData.age, '\"age\" field').to.eql(7);\r",
							"    pm.expect(jsonData.group.id, 'group id').to.eql(3);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"groupId\": 3\r\n    }",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "localhost:8080/students/1/group",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"students",
						"1",
						"group"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete student",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.expect(pm.response.code).to.be.oneOf([200]);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "localhost:8080/students/1",
					"host": [
						"localhost"
					],
					"port": "8080",
					"path": [
						"students",
						"1"
					]
				}
			},
			"response": []
		}
	]
}